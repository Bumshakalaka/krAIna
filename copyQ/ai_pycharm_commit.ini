[Command]
Command="
    copyq:
        function batOrSh() {
            // Regular expression to match the line containing OS information
            const osRegex = /^OS: (.*)$/m;
            const match = version().match(osRegex);

            // Check if a match was found
            if (match && match[1]) {
                return match[1].includes('Win') ? '.bat' : '.sh';
            } else {
                return '.sh';
            }
        }

        // Set KrAIna installation folder in your home folder
        var kraina_dir = '/repos/krAIna/';
        var kraina_script = 'kraina' + batOrSh();
        var repos_dir = 'repos/'

        // Get Project name from Pycharm title window
        var project = str(currentWindowTitle()).split(' ')[0].trim();

        // Find the project in your repo folders
        if (Dir(Dir().homePath() + repos_dir + project).exists()) {
            project_dir = Dir().homePath() + repos_dir + project;
        } else {
            popup('Error', \"'\" + project + \"' project not known\", 3000);
            abort();
        }

        const diff = execute('git',  '-C',  project_dir, 'diff', '--staged', '--no-prefix' ,'-U10', '--')
        if (diff.exit_code != 0) {
            popup('Error', str(diff.stderr).trim(), 3000);
            abort();
        }
        diff_result = str(diff.stdout).trim()

        var ff = new TemporaryFile();
        ff.open();
        ff.write('commit\\n');
        ff.write(diff_result);
        ff.close();

        const result = execute(Dir().homePath() + kraina_dir + kraina_script, ff.fileName());
        if (result.exit_code != 0) {
            popup('Error', str(result.stderr).trim(), 3000);
            abort();
        } else {
            copy(str(result.stdout).trim());
        }
        if (focused()) {
            hide();
        }
        paste();"
GlobalShortcut=alt+shift+3
Icon=\xf15b
IsGlobalShortcut=true
Name=ai:commit